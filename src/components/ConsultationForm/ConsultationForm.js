'use client'
import { useState } from 'react'
import './ConsultationForm.css'
import Notification from '../Notification/Notification'
import { validateForm, formatPhone, formatName, getSuccessMessage } from '../../utils/validation'

export default function ConsultationForm({ isOpen, onClose }) {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    agreement: false
  })
  const [errors, setErrors] = useState({ name: '', phone: '' })
  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' })
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [isSuccess, setIsSuccess] = useState(false)

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target
    
    if (type === 'checkbox') {
      setFormData(prev => ({ ...prev, [name]: checked }))
      setErrors(prev => ({ ...prev, [name]: '' }))
      return
    }
    
    let newValue = value
    if (name === 'name') {
      newValue = formatName(value)
    } else if (name === 'phone') {
      newValue = formatPhone(value)
    }
    
    setFormData(prev => ({ ...prev, [name]: newValue }))
    
    if (errors[name]) {
      setErrors(prev => ({ ...prev, [name]: '' }))
    }
  }

  const handleSubmit = async (e) => {
    e.preventDefault()
    
    const validation = validateForm(formData)
    
    if (!validation.isValid) {
      setErrors(validation.errors)
      setNotification({ 
        show: true, 
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤ —Ñ–æ—Ä–º–µ', 
        type: 'error' 
      })
      return
    }
    
    setIsSubmitting(true)
    
    try {
      const { sendToTelegram } = await import('../../utils/telegram')
      const result = await sendToTelegram(formData, '–§–æ—Ä–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏')
      
      if (result.success) {
        setIsSuccess(true)
        setNotification({ 
          show: true, 
          message: getSuccessMessage('consultation'), 
          type: 'success' 
        })
        setFormData({ name: '', phone: '', agreement: false })
        setErrors({})
        
        setTimeout(() => {
          onClose()
          setIsSuccess(false)
        }, 3000)
      } else {
        setNotification({ 
          show: true, 
          message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É.', 
          type: 'error' 
        })
      }
    } catch (error) {
      setNotification({ 
        show: true, 
        message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç—É.', 
        type: 'error' 
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  if (!isOpen) return null

  return (
    <>
      <Notification 
        message={notification.message}
        type={notification.type}
        isVisible={notification.show}
        onClose={() => setNotification({ ...notification, show: false })}
      />
      <div className="consultation-overlay" onClick={onClose}>
        <div className={`consultation-modal ${isSuccess ? 'success-animation' : ''}`} onClick={(e) => e.stopPropagation()}>
        <button 
          className="consultation-close"
          onClick={onClose}
          aria-label="–ó–∞–∫—Ä—ã—Ç—å —Ñ–æ—Ä–º—É"
        >
          √ó
        </button>
        
        <h2 className="consultation-title">
          {isSuccess ? '‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!' : 'üìû –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'}
        </h2>
        
        {isSuccess && (
          <div style={{
            textAlign: 'center',
            padding: '1rem',
            background: 'linear-gradient(135deg, #10b981, #059669)',
            color: 'white',
            borderRadius: '0.75rem',
            marginBottom: '1rem',
            boxShadow: '0 4px 12px rgba(16, 185, 129, 0.3)'
          }}>
            <p style={{ margin: 0, fontSize: '1.1rem', fontWeight: '600' }}>
              –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üöÄ
            </p>
            <p style={{ margin: '0.5rem 0 0 0', fontSize: '0.9rem', opacity: '0.9' }}>
              –ú—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è
            </p>
          </div>
        )}
        
        <form className="consultation-form" onSubmit={handleSubmit}>
          <div className="form-group">
            <label className="form-label" htmlFor="name">
              –í–∞—à–µ –∏–º—è *
            </label>
            <input
              type="text"
              id="name"
              name="name"
              className={`form-input ${errors.name ? 'error' : ''}`}
              value={formData.name}
              onChange={handleChange}
              placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
              maxLength="20"
              required
            />
            {errors.name && <span className="error-text">{errors.name}</span>}
          </div>
          
          <div className="form-group">
            <label className="form-label" htmlFor="phone">
              –¢–µ–ª–µ—Ñ–æ–Ω *
            </label>
            <input
              type="tel"
              id="phone"
              name="phone"
              className={`form-input ${errors.phone ? 'error' : ''}`}
              value={formData.phone}
              onChange={handleChange}
              placeholder="+7 (999) 123-45-67"
              maxLength="13"
              required
            />
            {errors.phone && <span className="error-text">{errors.phone}</span>}
          </div>
          
          <div className="checkbox-group">
            <input
              type="checkbox"
              id="agreement"
              name="agreement"
              className="checkbox-input"
              checked={formData.agreement}
              onChange={handleChange}
              required
            />
            <label className="checkbox-label" htmlFor="agreement">
              –Ø —Å–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            </label>
          </div>
          
          <button 
            type="submit" 
            className="submit-btn"
            disabled={!formData.name || !formData.phone || !formData.agreement || errors.name || errors.phone || isSubmitting || isSuccess}
          >
            {isSubmitting ? (
              <>
                <span style={{ display: 'inline-block', marginRight: '0.5rem' }}>‚è≥</span>
                –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...
              </>
            ) : isSuccess ? (
              <>
                <span style={{ display: 'inline-block', marginRight: '0.5rem' }}>‚úÖ</span>
                –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!
              </>
            ) : (
              <>
                <span style={{ display: 'inline-block', marginRight: '0.5rem' }}>üì§</span>
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
              </>
            )}
          </button>
        </form>
        </div>
      </div>
    </>
  )
}