'use client'
import { useState, useEffect } from 'react'
import './QuizModal.css'
import Notification from '../Notification/Notification'

export default function QuizModal({ isOpen, onClose }) {
  const [currentStep, setCurrentStep] = useState(0)
  const [answers, setAnswers] = useState({})
  const [showForm, setShowForm] = useState(false)
  const [formData, setFormData] = useState({ name: '', phone: '', agreed: false })
  const [errors, setErrors] = useState({ name: '', phone: '' })
  const [isSubmitted, setIsSubmitted] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [notification, setNotification] = useState({ show: false, message: '', type: 'success' })

  const questions = [
    {
      id: 'workType',
      title: '–ö–∞–∫–æ–π —Ç–∏–ø —Ä–∞–±–æ—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?',
      options: [
        { value: 'interior', label: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä, –æ—Ñ–∏—Å–æ–≤' },
        { value: 'construction', label: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —Ñ–∞—Å–∞–¥—ã' },
        { value: 'mixed', label: '–†–∞–∑–Ω—ã–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç' }
      ]
    },
    {
      id: 'volume',
      title: '–ö–∞–∫–æ–π –æ–±—ä–µ–º —Ä–∞–±–æ—Ç –≤ –º–µ—Å—è—Ü?',
      options: [
        { value: 'small', label: '–î–æ 500 –º¬≤ (–Ω–µ–±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã)' },
        { value: 'medium', label: '500-2000 –º¬≤ (—Å—Ä–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã)' },
        { value: 'large', label: '–ë–æ–ª–µ–µ 2000 –º¬≤ (–∫—Ä—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)' }
      ]
    },
    {
      id: 'power',
      title: '–ö–∞–∫–æ–µ —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ?',
      options: [
        { value: '220v', label: '220–í (–æ–±—ã—á–Ω–∞—è —Ä–æ–∑–µ—Ç–∫–∞)' },
        { value: '380v', label: '380–í (—Ç—Ä–µ—Ö—Ñ–∞–∑–Ω–∞—è —Å–µ—Ç—å)' },
        { value: 'both', label: '–ú–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª—é–±–æ–µ' }
      ]
    },
    {
      id: 'budget',
      title: '–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ?',
      options: [
        { value: 'budget', label: '–î–æ 450 000 ‚ÇΩ' },
        { value: 'medium', label: '450 000 - 600 000 ‚ÇΩ' },
        { value: 'premium', label: '–ë–æ–ª–µ–µ 600 000 ‚ÇΩ' }
      ]
    }
  ]

  const products = [
    { name: 'PERSONIYA V-1', price: '408 000 ‚ÇΩ', power: '230–í', productivity: '4-14 –ª/–º–∏–Ω', description: '–ö–æ–º–ø–∞–∫—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤' },
    { name: 'PERSONIYA V-1 PLUS', price: '428 000 ‚ÇΩ', power: '230–í', productivity: '10-20 –ª/–º–∏–Ω', description: '–£–ª—É—á—à–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å —Å –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é' },
    { name: 'PERSONIYA V380', price: '535 000 ‚ÇΩ', power: '380–í', productivity: '15-35 –ª/–º–∏–Ω', description: '–ü—Ä–æ–º—ã—à–ª–µ–Ω–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è –¥–ª—è –±–æ–ª—å—à–∏—Ö –æ–±—ä–µ–º–æ–≤' },
    { name: 'PERSONIYA 220/380', price: '–æ—Ç 650 000 ‚ÇΩ', power: '220/380–í', productivity: '20 –ª/–º–∏–Ω', description: '–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Å—Ç–∞–Ω—Ü–∏—è —Å –≤—ã—Å–æ–∫–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é' }
  ]

  useEffect(() => {
    if (isOpen) {
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }
    return () => {
      document.body.style.overflow = 'unset'
    }
  }, [isOpen])

  const handleAnswer = (value) => {
    const newAnswers = { ...answers, [questions[currentStep].id]: value }
    setAnswers(newAnswers)

    if (currentStep < questions.length - 1) {
      setCurrentStep(currentStep + 1)
    } else {
      setCurrentStep(questions.length)
    }
  }

  const getRecommendations = () => {
    const { workType, volume, power, budget } = answers
    let recommendations = []
    
    // –õ–æ–≥–∏–∫–∞ –ø–æ–¥–±–æ—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤
    if (volume === 'small' && budget === 'budget') {
      recommendations.push(products[0]) // PERSONIYA V-1
    }
    
    if (volume === 'small' && (budget === 'medium' || budget === 'premium')) {
      recommendations.push(products[1]) // PERSONIYA V-1 PLUS
    }
    
    if (volume === 'medium' && power === '380v') {
      recommendations.push(products[2]) // PERSONIYA V380
    }
    
    if (volume === 'large' || (workType === 'construction' && budget === 'premium')) {
      recommendations.push(products[3]) // PERSONIYA 220/380
    }
    
    if (power === 'both' && budget !== 'budget') {
      recommendations.push(products[3]) // PERSONIYA 220/380
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ
    if (recommendations.length === 0) {
      recommendations = [products[1], products[2]] // V-1 PLUS –∏ V380
    }
    
    // –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 2
    return [...new Set(recommendations)].slice(0, 2)
  }

  const resetQuiz = () => {
    setCurrentStep(0)
    setAnswers({})
    setShowForm(false)
    setIsSubmitted(false)
  }

  const handleClose = () => {
    resetQuiz()
    onClose()
  }

  const formatQuizResults = () => {
    const questionMap = {
      workType: '–ö–∞–∫–æ–π —Ç–∏–ø —Ä–∞–±–æ—Ç –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ?',
      volume: '–ö–∞–∫–æ–π –æ–±—ä–µ–º —Ä–∞–±–æ—Ç –≤ –º–µ—Å—è—Ü?',
      power: '–ö–∞–∫–æ–µ —ç–ª–µ–∫—Ç—Ä–æ–ø–∏—Ç–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ?',
      budget: '–ö–∞–∫–æ–π –±—é–¥–∂–µ—Ç –Ω–∞ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ?'
    }
    
    const answerMap = {
      interior: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—Ç–¥–µ–ª–∫–∞ –∫–≤–∞—Ä—Ç–∏—Ä, –æ—Ñ–∏—Å–æ–≤',
      construction: '–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã, —Ñ–∞—Å–∞–¥—ã',
      mixed: '–†–∞–∑–Ω—ã–µ –≤–∏–¥—ã —Ä–∞–±–æ—Ç',
      small: '–î–æ 500 –º¬≤ (–Ω–µ–±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã)',
      medium: '500-2000 –º¬≤ (—Å—Ä–µ–¥–Ω–∏–µ –æ–±—ä–µ–∫—Ç—ã)',
      large: '–ë–æ–ª–µ–µ 2000 –º¬≤ (–∫—Ä—É–ø–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã)',
      '220v': '220–í (–æ–±—ã—á–Ω–∞—è —Ä–æ–∑–µ—Ç–∫–∞)',
      '380v': '380–í (—Ç—Ä–µ—Ö—Ñ–∞–∑–Ω–∞—è —Å–µ—Ç—å)',
      both: '–ú–æ–≥—É –ø–æ–¥–∫–ª—é—á–∏—Ç—å –ª—é–±–æ–µ',
      budget: '–î–æ 450 000 ‚ÇΩ',
      medium: '450 000 - 600 000 ‚ÇΩ',
      premium: '–ë–æ–ª–µ–µ 600 000 ‚ÇΩ'
    }
    
    let result = '–û—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã:\n'
    Object.entries(answers).forEach(([key, value]) => {
      result += `${questionMap[key]}: ${answerMap[value]}\n`
    })
    
    const recommendations = getRecommendations()
    result += '\n–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n'
    recommendations.forEach((product, index) => {
      result += `${index + 1}. ${product.name} - ${product.price}\n`
    })
    
    return result
  }

  const handleFormSubmit = async (e) => {
    e.preventDefault()
    
    if (errors.name || errors.phone || !formData.name || !formData.phone || !formData.agreed) {
      return
    }
    
    setIsSubmitting(true)
    
    try {
      const { sendToTelegram } = await import('../../utils/telegram')
      const quizData = {
        name: formData.name,
        phone: formData.phone,
        message: formatQuizResults()
      }
      
      const result = await sendToTelegram(quizData, '–ö–≤–∏–∑ –ø–æ–¥–±–æ—Ä–∞ —Å—Ç–∞–Ω—Ü–∏–∏')
      
      if (result.success) {
        setIsSubmitted(true)
        setNotification({ 
          show: true, 
          message: 'üéâ –°–ø–∞—Å–∏–±–æ! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ —Å–≤—è–∂–µ–º—Å—è —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º!', 
          type: 'success' 
        })
        setFormData({ name: '', phone: '', agreed: false })
        setTimeout(() => {
          setNotification(prev => ({ ...prev, show: false }))
        }, 3000)
        setTimeout(() => handleClose(), 4000)
      } else {
        setNotification({ 
          show: true, 
          message: '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º.', 
          type: 'error' 
        })
      }
    } catch (error) {
      setNotification({ 
        show: true, 
        message: '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', 
        type: 'error' 
      })
    } finally {
      setIsSubmitting(false)
    }
  }

  const handleFormChange = (e) => {
    const { name, value, type, checked } = e.target
    
    if (type === 'checkbox') {
      setFormData(prev => ({ ...prev, [name]: checked }))
      return
    }
    
    let newValue = value
    let error = ''
    
    if (name === 'name') {
      newValue = value.slice(0, 10)
      if (newValue.length < 2) {
        error = '–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞'
      }
    }
    
    if (name === 'phone') {
      newValue = value.replace(/[^+\d]/g, '').slice(0, 13)
      const phoneRegex = /^\+?[1-9]\d{10,11}$/
      if (newValue && !phoneRegex.test(newValue)) {
        error = '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX'
      }
    }
    
    setFormData(prev => ({ ...prev, [name]: newValue }))
    setErrors(prev => ({ ...prev, [name]: error }))
  }

  if (!isOpen) return null

  return (
    <>
      <div className="quiz-modal-overlay" onClick={handleClose}>
        <div className="quiz-modal" onClick={(e) => e.stopPropagation()}>
        <button className="quiz-close" onClick={handleClose}>‚úï</button>

        <div className="quiz-content" style={{ position: 'relative' }}>
          {showForm ? (
            isSubmitted ? (
              <div className="quiz-success">
                <div className="success-icon">‚úÖ</div>
                <h2>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</h2>
                <p>–ù–∞—à —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 15 –º–∏–Ω—É—Ç</p>
              </div>
            ) : (
              <div className="quiz-form" style={{ position: 'relative' }}>
                {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã */}
                {notification.show && (
                  <div style={{
                    position: 'absolute',
                    top: '-60px',
                    left: '0',
                    right: '0',
                    zIndex: 1000,
                    padding: '1rem',
                    borderRadius: '0.75rem',
                    background: notification.type === 'success' 
                      ? 'linear-gradient(135deg, #10b981, #059669)' 
                      : 'linear-gradient(135deg, #ef4444, #dc2626)',
                    color: 'white',
                    fontSize: '0.9rem',
                    fontWeight: '500',
                    textAlign: 'center',
                    boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
                    animation: 'slideDown 0.3s ease-out'
                  }}>
                    {notification.message}
                  </div>
                )}
                
                <h2>–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</h2>
                <form onSubmit={handleFormSubmit}>
                  <div className="form-group">
                    <label className="form-label">–í–∞—à–µ –∏–º—è *</label>
                    <input
                      type="text"
                      name="name"
                      className={errors.name ? 'error' : ''}
                      placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                      value={formData.name}
                      onChange={handleFormChange}
                      maxLength="10"
                      required
                    />
                    {errors.name && <span className="error-text">{errors.name}</span>}
                  </div>
                  
                  <div className="form-group">
                    <label className="form-label">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                    <input
                      type="tel"
                      name="phone"
                      className={errors.phone ? 'error' : ''}
                      placeholder="+7 (999) 123-45-67"
                      value={formData.phone}
                      onChange={handleFormChange}
                      maxLength="13"
                      required
                    />
                    {errors.phone && <span className="error-text">{errors.phone}</span>}
                  </div>
                  
                  <div className="checkbox-group">
                    <input
                      type="checkbox"
                      id="agreed"
                      name="agreed"
                      className="checkbox-input"
                      checked={formData.agreed}
                      onChange={handleFormChange}
                      required
                    />
                    <label htmlFor="agreed" className="checkbox-label">
                      –°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    </label>
                  </div>
                  
                  <button 
                    type="submit" 
                    disabled={!formData.name || !formData.phone || !formData.agreed || errors.name || errors.phone || isSubmitting}
                  >
                    {isSubmitting ? '‚è≥ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º...' : 'üì§ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
                  </button>
                </form>
              </div>
            )
          ) : currentStep < questions.length ? (
            <>
              <div className="quiz-progress">
                <div 
                  className="quiz-progress-bar"
                  style={{ width: `${((currentStep + 1) / questions.length) * 100}%` }}
                ></div>
              </div>

              <h2 className="quiz-title">{questions[currentStep].title}</h2>
              
              <div className="quiz-options">
                {questions[currentStep].options.map((option) => (
                  <button
                    key={option.value}
                    className="quiz-option"
                    onClick={() => handleAnswer(option.value)}
                  >
                    {option.label}
                  </button>
                ))}
              </div>
            </>
          ) : (
            <div className="quiz-result">
              <h2>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –¥–ª—è –≤–∞—Å:</h2>
              <div className="quiz-recommendations">
                {getRecommendations().map((product, index) => (
                  <div key={index} className="recommendation-card">
                    <h3>{product.name}</h3>
                    <p className="product-description">{product.description}</p>
                    <div className="product-specs">
                      <span>–ü–∏—Ç–∞–Ω–∏–µ: {product.power}</span>
                      <span>–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {product.productivity}</span>
                    </div>
                    <div className="product-price">{product.price}</div>
                  </div>
                ))}
              </div>
              <div className="quiz-actions">
                <button className="quiz-restart" onClick={resetQuiz}>
                  –ü—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ
                </button>
                <button className="quiz-consultation" onClick={() => setShowForm(true)}>
                  –£–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ
                </button>
              </div>
            </div>
          )}
        </div>
        </div>
      </div>
    </>
  )
}